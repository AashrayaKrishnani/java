--
JUnit
--

It is a framework that allows us to Run certain *predefined* tests (code snippets) on the Code to 
check for *Basic Functionality* or *desired outputs*!

-- 
Example
--

Suppose we have the following code.

/**
 * BankAccount
 */
public class BankAccount {

    private String firstname;
    private String lastName;
    private double balance;

    public BankAccount(String firstname, String lastName, double balance) {
        this.firstname = firstname;
        this.lastName = lastName;
        this.balance = balance;
    }

    public double deposit(double amount, boolean fromBranch)
    {
        balance += amount>0 ? amount : 0;
        return balance;
    }

    public double withdraw(double amount, boolean fromBranch)
    {
        balance -= amount <= balance? amount:0; 
        return balance;
    }

}

---
Then we can write the Testing code for Junit to check as:
---
public class BankAccountTest {

    @org.junit.Test
    public void withdraw() throws Exception
    {
        BankAccount ba = new BankAccount("dummy", "dummy", 1000);
        assertEquals(1000, ba.withdraw(0, false));
        assertEquals(1000, ba.withdraw(-200, false));
        assertEquals(800, ba.withdraw(200, false));
    }

    @org.junit.Test
    public void getBalance() throws Exception
    {
        fail("Yet to be Implemented."); // fail() is from JUnit itself
    }

}


---

Where each function is *Executable* and is a test in itself! :)


--------
But instead of Instantiating a BankAccount variable in each Test, we can do something like this:

public class BankAccountTest {

    BankAccount ba =;

    @org.junit.BeforeClass
    public void firstSetup()
    {
        ba = new BankAccount("dummy", "dummy", 1000);
    }

    @org.junit.BeforeClass
    public void setupBeforeTest()
    {
        ba.setBalance(1000);
    }


    @org.junit.Test
    public void withdraw() throws Exception
    {
        assertEquals(1000, ba.withdraw(0, false));
        assertEquals(1000, ba.withdraw(-200, false));
        assertEquals(800, ba.withdraw(200, false));
    }
}

---

where,
 @org.junit.BeforeClass  means method runs FIRST Just Once when the class is Instantiated.
 @org.junit.Before means Method Runs Before EVERY Test Case! :D

Similarly we have,
 @org.junit.AfterClass  means Method runs LAST Just Once when the class is Instantiated.
 @org.junit.After means Method Runs After EVERY Test Case! :D


 ------

 If a Test is expected to throw an Exception, 
 then instead of allowing it mess up our output screen, we can do this:


    @org.junit.Test(expected = IllegalArgumentException.class )
    public void withdraw() throws Exception
    {
        ba.withdraw(-200, false);
        fail("Should have thrown IllegalArgumentException! :/");
    }

supposing BankAccount.withdraw() throws IllegalArgumentException for -ve withdrawal amount, 
this test will pass and not mess the output screen  :)


----------
Parameterized Testing
----------

/**
 * BankAccountParameterizedTest
 */
public class BankAccountParameterizedTest {
 
    private BankAccount ba;
    private double balance;
    private double expected;
    private double amount;


    public BankAccountParameterizedTest(double balance, double amount, double expected) {
        this.balance = balance;
        this.amount = amount;
        this.expected = expected;
    }

    @Parameterized.parameters
    public static Collection<Object[]> testCondition()
    {
        return Arrays.asList(new Object[][]{
            // Initializing Constructor values :D
            {1000, 200, 1200},
            {200, -200, 200},
            {1000, 1000, 2000}
        });
    }

    @org.junit.Before
    public void setup()
    {
        ba = new BankAccount("firstname", "lastName", balance);
    }

    @org.junit.Test
    public void deposit()
    {
        assertEquals(expected, ba.deposit(amount, false), 0.1); 
        // The Third Argument is the Delta Argument to make up for the calculation error when dealing with Double values :)
    }

    

}
